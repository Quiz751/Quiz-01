{
  "name": "mcqs generated by ai",
  "nodes": [
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"mcqs\": [\n    {\n      \"number\": 1,\n      \"question\": \"Management can best be defined as:\",\n      \"options\": {\n        \"a\": \"The art of getting things done through people\",\n        \"b\": \"The process of making profits\",\n        \"c\": \"The ability to supervise workers only\",\n        \"d\": \"The science of producing goods only\"\n      },\n      \"correct_answer\": \"a\",\n      \"explanation\": \"Management is commonly defined as the art of getting things done through others using resources effectively.\"\n    },\n    {\n      \"number\": 2,\n      \"question\": \"Which of the following shows that management is both an art and a science?\",\n      \"options\": {\n        \"a\": \"It involves only experiments\",\n        \"b\": \"It requires personal skills and also principles\",\n        \"c\": \"It deals only with machinery\",\n        \"d\": \"It does not depend on human behavior\"\n      },\n      \"correct_answer\": \"b\",\n      \"explanation\": \"Management is considered both an art (skill, creativity) and a science (systematic principles).\"\n    }\n  ]\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        400,
        720
      ],
      "id": "51ad41c2-9ff0-490c-a681-82f0564ee249",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={\n  \"subject\": \"[{{ $json.body.subject }}]\",\n  \"topic\": \"[{{ $json.body.topic}}]\",\n  \"prompt\": \"Explain the topic in detail with definitions, subtopics, examples, and formulas where relevant. If the topic is vague or incomplete, expand it based on the subject and provide related key insights so the explanation remains clear and useful.\"\n}\n"
            },
            {
              "name": "max_results",
              "value": "8"
            },
            {
              "name": "search_depth",
              "value": "advanced"
            },
            {
              "name": "include_answer",
              "value": "advanced"
            },
            {
              "name": "chunks_per_source",
              "value": "4"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -80,
        496
      ],
      "id": "6942dc30-25a2-4e96-a84b-b91aedb6593d",
      "name": "tavily",
      "credentials": {
        "httpBearerAuth": {
          "id": "LD2KMOuJx8dtBIRm",
          "name": "tavily"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}{{ $json.results }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are an AI expert in <subject>. Your task is to create **20 high-quality MCQs** from the given content. Follow the rules strictly.\n\nINPUT:\n- Subject: $subject\n- Topic: $topic\n- User Prompt / Question: $prompt\n- Draft Answer: $draft_answer\n- Supporting Results / Sources: $results (title + content)\n\nTASKS:\n1. Integrate all provided information (draft answer + sources) and expand it with your knowledge. Include:\n   - Definitions\n   - Core concepts\n   - Methods or formulas\n   - Examples\n   - Applications and use cases\n   - Advantages, limitations, pitfalls\n   - Extended notes\n\n2. From the expanded content, generate **20 exam-ready MCQs**. Rules:\n   - Each MCQ must have: number (1–20), question text, 4 options (a–d), correct answer, 2–3 line explanation.\n   - Difficulty distribution:\n       - Easy: ~8\n       - Medium: ~8\n       - Hard: ~4\n   - Cover all areas: definitions, concepts, formulas, examples, applications, advantages, extended notes.\n   - Ensure diversity; avoid repetition.\n   - Explanations must be fact-based and concise.\n   - Output must be **valid JSON** with this exact structure:\n\n{\n  \"subject\": \"<subject>\",\n  \"chapter\": \"<topic>\",\n  \"sub_topic\": \"<user prompt>\",\n  \"mcqs\": [\n    {\n      \"number\": <1–20>,\n      \"question\": \"<text>\",\n      \"options\": { \"a\": \"<text>\", \"b\": \"<text>\", \"c\": \"<text>\", \"d\": \"<text>\" },\n      \"correct_answer\": \"<a|b|c|d>\",\n      \"explanation\": \"<2–3 line reason>\"\n    }\n  ],\n  \"notes\": \"\"\n}\n\nVALIDATION:\n- Ensure 20 MCQs exactly.\n- Numbers are consecutive 1–20.\n- JSON is clean: no trailing commas, no extra keys.\n- Difficulty ratio roughly 40% easy, 40% medium, 20% hard.\n\nYour output should **directly be the final JSON**, ready to use in exams.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        176,
        496
      ],
      "id": "22b10c14-e730-4736-8e91-cb11f71a5625",
      "name": "generate content"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.output.mcqs }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        992,
        496
      ],
      "id": "d10c27c8-e4d9-4f6e-a4ef-a2579453ba1c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        768,
        496
      ],
      "id": "f0c47a98-8cef-46f2-839c-af7d94460d25",
      "name": "Wait",
      "webhookId": "0a65cdc3-2c1e-44f6-ae3a-3a3da5d7d3a1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "14088136-62ca-4877-ab45-6e9e50fd6502",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -304,
        496
      ],
      "id": "df90aa2a-d73a-465e-80cf-d3bcc6875af9",
      "name": "Webhook",
      "webhookId": "14088136-62ca-4877-ab45-6e9e50fd6502",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        256,
        912
      ],
      "id": "843004de-cf15-4746-be74-1a1bd4643005",
      "name": "Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "PPt2VGeyPM50abHC",
          "name": "Google Gemini(PaLM) Api account 0"
        }
      }
    },
    {
      "parameters": {
        "model": "z-ai/glm-4.5-air:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        144,
        720
      ],
      "id": "0e8ec28e-888e-4abc-9960-d464d2b4bce7",
      "name": "OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "F4A4JCLsjJuY4D6j",
          "name": "OpenRouter account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "generate content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "tavily": {
      "main": [
        [
          {
            "node": "generate content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate content": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "tavily",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "generate content",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "generate content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Kolkata",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "f094b60a-2967-44f3-bdef-d8ed79929bda",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5ec010c60cb3f57afa858e6b48afed0fb9a2d9e86dc9efaa7312c463df0a0d7d"
  },
  "id": "xGt5c3Bg52kfNXV6",
  "tags": []
}