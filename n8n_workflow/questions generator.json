{
  "name": "questions generator",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        176,
        240
      ],
      "id": "7f54ba77-903d-4355-9fa3-85bc6ea09b9c",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "value": "topics",
          "mode": "list",
          "cachedResultName": "topics"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "219"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        384,
        240
      ],
      "id": "15db866d-bdd4-4e32-a878-fb1d410c3100",
      "name": "Select rows from a table",
      "credentials": {
        "mySql": {
          "id": "83aoUVpNHdAnbsCx",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        544,
        240
      ],
      "id": "62d26e2f-a13e-4288-accb-bc7a51fa67ea",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        1840,
        256
      ],
      "id": "78524e43-633b-42e2-8d21-e92235184715"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1696,
        256
      ],
      "id": "1bf5b1f8-29aa-472e-97c9-a9268c827244",
      "name": "Wait",
      "webhookId": "9ea78728-0b9b-4748-a260-646adeab53db"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT s.name, c.title\nFROM chapters c\nJOIN subjects s ON c.subject_id = s.id\nWHERE c.id =1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.5,
      "position": [
        768,
        256
      ],
      "id": "946791be-26ad-4db4-a18b-6fe1c0d14ebb",
      "name": "gets subject and chapter names",
      "credentials": {
        "mySql": {
          "id": "83aoUVpNHdAnbsCx",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"mcqs\": [\n    {\n      \"number\": 1,\n      \"question\": \"Management can best be defined as:\",\n      \"options\": {\n        \"a\": \"The art of getting things done through people\",\n        \"b\": \"The process of making profits\",\n        \"c\": \"The ability to supervise workers only\",\n        \"d\": \"The science of producing goods only\"\n      },\n      \"correct_answer\": \"a\",\n      \"explanation\": \"Management is commonly defined as the art of getting things done through others using resources effectively.\"\n    },\n    {\n      \"number\": 2,\n      \"question\": \"Which of the following shows that management is both an art and a science?\",\n      \"options\": {\n        \"a\": \"It involves only experiments\",\n        \"b\": \"It requires personal skills and also principles\",\n        \"c\": \"It deals only with machinery\",\n        \"d\": \"It does not depend on human behavior\"\n      },\n      \"correct_answer\": \"b\",\n      \"explanation\": \"Management is considered both an art (skill, creativity) and a science (systematic principles).\"\n    }\n  ]\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1104,
        480
      ],
      "id": "45a946dc-1c20-4c81-8b40-6a39f46c61ca",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.first().json; \n\nconst chapter_id =$('Select rows from a table').first().json.chapter_id;\nconst topic_id =$('Select rows from a table').first().json.id ;\n\nif (items.output) {\n  items.output.chapter_id = parseInt(chapter_id, 10);\n  items.output.topic_id = parseInt(topic_id, 10);\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        256
      ],
      "id": "40aea0a8-5f44-4842-8b63-5bfb9a9472b1",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate exam-oriented MCQs with the rules in the system prompt.\n\nSubject: {{ $json.name }}\nChapter: {{ $json.title }}\nSub-topic: {{ $('Select rows from a table').item.json.name }}\n\nRequirements:\n- Minimum MCQs: 10 (generate more if unique questions are available)\n- Difficulty ratio: 40% hard, 30% medium, 30% easy\n- No duplicates or rephrased repeats\n- Output strictly in the JSON shape defined by the system prompt (no extra text)\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an exam-preparation AI that generates Multiple Choice Questions (MCQs).\n\nSTRICT RULES\n1) Use ONLY the given sub-topic. No off-topic content. No duplicates or rephrased repeats.\n2) Generate AT LEAST 10 MCQs. If there are more unique concepts available, generate MORE than 10.\n3) Difficulty ratio for the final set:\n   - 40% hard\n   - 30% medium\n   - 30% easy\n   Rounding rule for counts:\n   - Compute targets = round(total * ratio).\n4) Every MCQ MUST have: question, options a/b/c/d, correct_answer (a/b/c/d), explanation (2–3 lines).\n5) Output MUST be valid JSON ONLY (no markdown fences, no prose).\n\nOUTPUT SHAPE (MUST MATCH EXACTLY)\n{\n  \"subject\": \"<subject>\",\n  \"chapter\": \"<chapter>\",\n  \"sub_topic\": \"<sub-topic>\",\n  \"total_mcqs\": <integer>,\n  \"mcqs\": [\n    {\n      \"number\": <int>,\n      \"question\": \"<text>\",\n      \"options\": { \"a\": \"<text>\", \"b\": \"<text>\", \"c\": \"<text>\", \"d\": \"<text>\" },\n      \"correct_answer\": \"<a|b|c|d>\",\n      \"explanation\": \"<2–3 line exam-friendly reason>\"\n}\n  ],\n  \"notes\": \"<empty string or reason if ratio was backfilled>\"\n}\n\nVALIDATION YOU MUST SELF-CHECK BEFORE RETURNING\n- total_mcqs === mcqs.length\n- Each MCQ number is unique, consecutive, starting from 1\n- JSON is valid (no trailing commas, no markdown, no extra keys)\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        960,
        256
      ],
      "id": "04cc168d-f6ec-4683-9773-1fff3ef1bd34",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "qwen/qwen3-32b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1200,
        688
      ],
      "id": "873c637c-4be2-4ce6-bdfe-020c631505e4",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "KZ5QGc2bqUz3f1KO",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        976,
        512
      ],
      "id": "f8f654d2-37a5-4cd8-b9bd-666b05e4d00b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "dfyp9q4hHPILj1ET",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-3.3-70b-instruct:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        784,
        512
      ],
      "id": "d05ff0c6-754a-49eb-bcd3-eac3c20e87db",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "F4A4JCLsjJuY4D6j",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "xPv8BZGcF1OgwxHy",
          "mode": "list",
          "cachedResultName": "inserts MCQs"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "output": "={{ $json.output }}"
          },
          "matchingColumns": [
            "output"
          ],
          "schema": [
            {
              "id": "output",
              "displayName": "output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1488,
        256
      ],
      "id": "f1e3b77f-cef2-4b5a-85c7-79043bd27010",
      "name": "inserts MCQs"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "gets subject and chapter names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gets subject and chapter names": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "inserts MCQs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "inserts MCQs": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4c007ed4-88e7-490e-afce-818935b41ad3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5ec010c60cb3f57afa858e6b48afed0fb9a2d9e86dc9efaa7312c463df0a0d7d"
  },
  "id": "PiZSrh86rRINYeaK",
  "tags": []
}